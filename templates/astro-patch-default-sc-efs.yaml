AWSTemplateFormatVersion: "2010-09-09"
Description: "set kube-system gp2 storage class to false. causing clash with efs kube-system storage"
Metadata:
  cfn-lint: { config: { ignore_checks: [W9002, W9003, W9004, W9006, E9007, E9008] } }
Parameters:
  KubeClusterName:
      Type: String
Resources:
  ServiceAccount:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${KubeClusterName}"
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: internal-kubectl
          namespace: kube-system
  # Creates role binding to give our service account admin access
  ServiceClusterRoleBinding:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${KubeClusterName}"
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: internal-kubectl-admin
          namespace: kube-system
        subjects:
          - kind: ServiceAccount
            name: internal-kubectl
            namespace: kube-system
        roleRef:
          kind: ClusterRole
          name: cluster-admin
          apiGroup: rbac.authorization.k8s.io

  JobResource:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: ServiceClusterRoleBinding
    Properties:
      ClusterName: !Ref KubeClusterName
      Namespace: kube-system
      Manifest: !Sub |
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: patch-sc
        spec:
          template:
            spec:
              serviceAccountName: internal-kubectl
              nodeSelector:
                kubernetes.io/os: linux
              containers:
              - name: patch-sc
                image: bitnami/kubectl:1.18
                command: ["/bin/bash","-c"]
                args:
                  - >
                    while true ; do
                      if [[ $(kubectl get sc -o name | wc -l) == 2 ]]; then
                        kubectl patch storageclass gp2 -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}';
                        kubectl patch storageclass aws-efs -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}';
                        exit 0
                      fi
                      sleep 2;
                    done
              restartPolicy: OnFailure
          backoffLimit: 4