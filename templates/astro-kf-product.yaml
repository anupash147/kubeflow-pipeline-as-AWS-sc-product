AWSTemplateFormatVersion : 2010-09-09
Description : Kubeflow product launcher
Parameters:
  AvailabilityZones:
    Description: List of Availability Zones to use for the subnets in the VPC. Three
      Availability Zones are used for this deployment.
    Type: List<AWS::EC2::AvailabilityZone::Name>
  KeyPairName:
    Description: Name of an existing key pair, which allows you
      to securely connect to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName
  EKSClusterName:
    Type: String
    Default: "astro-kf"
    Description: "(Optional) Name for the EKS cluster. If left blank, one is auto-generated. This must be unique within the Region."
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), periods (.) and forward slash (/).
    Default: quickstart-amazon-eks/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), periods (.) and
      forward slash (/).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: Region where the Quick Start S3 bucket (QSS3BucketName) is
      hosted. When using your own bucket, you must specify this value.
    Type: String
  RemoteAccessCIDR:
    Default: "0.0.0.0/0"
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: CIDR IP range that is permitted to access the instances. We recommend
      that you set this value to a trusted IP range.
    Type: String
  IamOidcProvider:
    Type: String
    AllowedValues: [ "Enabled", "Disabled" ]
    Default: "Disabled"
    Description: Enables IAM roles for Kubernetes service accounts.
Conditions:
    UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
Resources:
 VPCFinderLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Policies:
          -
            PolicyName: allowLambdaLogging
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "ec2:DescribeVpcs"
                  Resource: "*"
 VPCFinderLambdaFunction:
   Type: AWS::Lambda::Function
   Properties:
        Handler: index.lambda_handler
        Timeout: 10
        Role: !GetAtt "VPCFinderLambdaRole.Arn"
        Runtime: python3.6
        Code:
          ZipFile: |
            import cfnresponse
            import boto3
            from os import environ
            def use_vpc_cidr(notations='10.0'):
                environ['CLASSB'] = ""
                if int(notations[3:]) > 254: return
                client = boto3.client('ec2',region_name='us-east-1')
                response = client.describe_vpcs(
                    Filters=[
                        {
                            'Name': 'cidr-block-association.cidr-block',
                            'Values': [
                                '{}.0.0/16'.format(notations), #Enter you cidr block here
                            ]
                        },
                    ]
                )
                resp = response['Vpcs']
                if resp:
                    use_vpc_cidr('10.{}'.format(int(notations[3:]) + 1))
                else:
                    environ['CLASSB'] = '{}'.format(notations)
            def lambda_handler(event, context):
                print(f"Data in event: {event}")
                response_data = {}
                if event["RequestType"] == "Create":
                    use_vpc_cidr()
                    response_data = { "classb": environ['CLASSB']}
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, "CustomResourcePhysicalID")

 VPCClass:
   Type: AWS::CloudFormation::CustomResource
   Properties:
     ServiceToken: !GetAtt VPCFinderLambdaFunction.Arn
 VPCStack:
    Type: AWS::CloudFormation::Stack
    Metadata:
      cfn-lint: { config: { ignore_checks: [ W9901 ] } }
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/amazon-eks-entrypoint-new-vpc.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AvailabilityZones: !Join [ ',', !Ref 'AvailabilityZones' ]
        KeyPairName: !Ref 'KeyPairName'
        VPCCIDR: !Join [ '', [!GetAtt VPCClass.classb, '.0.0/16' ]]
        PrivateSubnet1CIDR: !Join [ '', [ !GetAtt VPCClass.classb, '.0.0/18' ]]
        PrivateSubnet2CIDR: !Join [ '', [ !GetAtt VPCClass.classb, '.64.0/18' ]]
        PrivateSubnet3CIDR: !Join [ '', [ !GetAtt VPCClass.classb, '.128.0/18' ]]
        PublicSubnet1CIDR: !Join [ '', [ !GetAtt VPCClass.classb, '.192.0/20' ]]
        PublicSubnet2CIDR: !Join [ '', [ !GetAtt VPCClass.classb, '.208.0/20' ]]
        PublicSubnet3CIDR: !Join [ '', [ !GetAtt VPCClass.classb, '.224.0/20' ]]
        RemoteAccessCIDR: !Ref 'RemoteAccessCIDR'
        EKSClusterName: !Ref EKSClusterName
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        QSS3BucketRegion: !Ref QSS3BucketRegion
        IamOidcProvider: !Ref IamOidcProvider
Outputs:
 Vpcid:
    Value: !Join
      - ""
      - - !GetAtt VPCClass.classb
        - '.0.0/16'
    Description: "Sample random string generated by lambda function using Node.js"